<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.futao.springbootdemo.dao.ArticleDao">

    <!--配置一个LRU缓存（二级缓存），每隔60秒进行刷新，存储512个对象-->
    <!--
        LRU     最近最少使用策略，移除最长时间不被使用的对象
        FIFO    先进先出策略
        SOFT    软引用策略，移除基于垃圾回收器状态和软引用规则的对象
        WEAK    弱引用策略，更积极地移除基于垃圾回收器状态和软引用规则的对象
    -->
    <!--<cache eviction="LRU" flushInterval="60000" size="512" readOnly="true"/>-->
    <cache type="mybatisCacheRedis"/>


    <insert id="add" parameterType="article">
        insert into springmvcdemo.futao_article (id, title, description, content, author, visit_times, create_time,
                                                 last_modify_time)
        values (#{id}, #{title}, #{description}, #{content}, #{author.id}, #{visitTimes}, #{createTime},
                #{lastModifyTime})
    </insert>

    <select id="byId" parameterType="java.lang.String" resultType="article">
        select id,
               title,
               description,
               content,
               author,
               visit_times,
               create_time,
               last_modify_time
        from springmvcdemo.futao_article
        where id = #{value}
        limit 1
    </select>

    <select id="list" resultType="com.futao.springbootdemo.model.entity.Article">
        select a.id,
               a.title,
               a.description,
               a.content,
               a.create_time,
               a.last_modify_time,
               u.id,
               username
        from springmvcdemo.futao_article a
                 left join springmvcdemo.futao_user u on a.author = u.id
    </select>

    <!--关联查询示例-->
    <select id="byUser" parameterType="user" resultMap="articleResultMap" useCache="true">
        select a.id               as aId,
               a.title,
               a.description,
               a.content,
               a.create_time      as aCreateTime,
               a.last_modify_time as aLastModifyTime,
               u.id               as uId,
               username
        from springmvcdemo.futao_article a
                 left join springmvcdemo.futao_user u on a.author = u.id
        where author = #{id}
    </select>


    <resultMap id="articleResultMap" type="article">
        <id property="id" column="aId"/>
        <result property="title" column="title"/>
        <result property="description" column="description"/>
        <result property="content" column="content"/>
        <result property="createTime" column="aCreateTime"/>
        <result property="lastModifyTime" column="aLastModifyTime"/>
        <!--关联映射查询-属性为对象-使用一条sql查询-->
        <association property="author" column="author" javaType="user" fetchType="lazy">
            <id property="id" column="uId"/>
            <result property="username" column="username"/>
        </association>
        <!--属性为List-->
        <collection property="tagList" javaType="arrayList" column="aId" ofType="tag" fetchType="lazy"
                    select="com.futao.springbootdemo.dao.TagDao.selectTagByArticleId"/>
    </resultMap>

</mapper>