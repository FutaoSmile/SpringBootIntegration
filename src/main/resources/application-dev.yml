spring:
  messages:
    # 定义国际化文件的文件地址，读取的原则是顺序读取如果存在同名的则读取第一个
    basename: i18n/login,i18n/errorMessage
  cache:
    type: redis
    redis:
      use-key-prefix: true
      cache-null-values: true
  #      time-to-live: 5s
  servlet:
    # 设置文件上传与下载的文件大小限制
    multipart:
      max-file-size: 10Mb
      max-request-size: 100Mb

  http:
    encoding:
      charset: UTF-8
      enabled: true
  jpa:
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5Dialect
    entitymanager:
      packagesToScan: com.futao.springmvcdemo.model
    hibernate:
      ddl-auto: update
  data:
    # 全文检索 elasticsearch
    elasticsearch:
      cluster-name: elasticsearch-service #节点名称
      cluster-nodes: 127.0.0.1:9300 #节点地址
  # 数据源
  datasource:
    url: jdbc:mysql://localhost:3306/springboot?useUnicode=true&characterEncoding=utf8
    username: root
    password: 123456789
    driver-class-name: com.mysql.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    platform: mysql
    filters: stat,wall
    initialSize: 5
    minIdle: 10
    maxActive: 50
    maxWait: 60000
    timeBetweenEvictionRunsMillis: 2000
    minEvictableIdleTimeMillis: 600000
    maxEvictableIdleTimeMillis: 900000
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
    maxOpenPreparedStatements: 20
    asyncInit: true
    logSlowSql: true
  # 格式化返回的Timestamp类型
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  # redis
  redis:
    database: 0
    host: localhost
    port: 6379
    #    password: nobug666
    jedis:
      pool:
        max-active: 10
        min-idle: 0
        max-idle: 8
    timeout: 10s
  thymeleaf:
    # 模板引擎如果要实时刷新需要1.禁用缓存2.页面修改后需要Control+F9重新编译该页面
    # 页面缓存
    cache: false
    prefix:classpath: /templates/
    mode: HTML
  # 发邮件
  mail:
    host: smtp.qq.com
    port: 587
    username: 1185172056@qq.com
    password: security
    properties:
      smtp:
        auth: true
        starttls:
          enable: true
          required: true
  mvc:
    dispatch-options-request: false


#      mail:
#        smtp:
#          ssl:
#            enable: true

###producer
#该应用是否启用生产者
rocketmq:
  producer:
    onOff: on
    #发送同一类消息的设置为同一个group，保证唯一,默认不需要设置，rocketmq会使用ip@pid(pid代表jvm名字)作为唯一标示
    groupName: ${spring.application.name}
    #mq的nameserver地址
    nameServerAddr: 127.0.0.1:9876
    #消息最大长度 默认1024*4(4M)
    maxMessageSize: 4096
    #发送消息超时时间,默认3000
    sendMsgTimeout: 3000
    #发送消息失败重试次数，默认2
    retryTimesWhenSendFailed: 2
    # 心跳检测时间间隔
    heartbeatBrokerInterval: 30000
    vipChannelEnabled: false
  ###consumer
  ##该应用是否启用消费者
  consumer:
    onOff: on
    groupName: ${spring.application.name}
    #mq的nameserver地址
    nameServerAddr: 127.0.0.1:9876
    #该消费者订阅的主题和tags("*"号表示订阅该主题下所有的tags),格式：topic~tag1||tag2||tag3;topic2~*;
    topics: niubiTopic
    consumeThreadMin: 20
    consumeThreadMax: 64
    #设置一次消费消息的条数，默认为1条
    consumeMessageBatchMaxSize: 1
    reConsumerTimes: 3
    tags: niubiTag

server:
  port: 8888

# 在控制台打印sql
mybatis:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

# 在线人数缩放比例
onlinePeopleQuantityScale: 2

jianshu:
  id: futaosmile

# 线程池配置
threadpool: {corePoolSize: 10,maxPoolSize: 200,queueCapacity: 10}



# springboot默认输出的是>=info级别的日志

#debug: true
#logging:
# 不指定路径则在当前项目根目录下生成该日志文件
#  file: logback-1.log
# 日志目录，与logging.file同时存在则取file的配置
#  pattern:
#    console:


#  path:
#  level:
#    root: info
#    org:
#      hibernate:
#        SQL: DEBUG
#        ES_TYPE:
#          descriptor:
#            sql:
#              BasicBinder: TRACE

# [日志打印出来不好看.xml]logback-spring



futao:
  # 注册邮件验证码过期时间
  registerMailCodeExpireSecond: 300
  sessionInvalidateSecond: 1800

# mybatis-plus插件
#mybatis-plus:
#  typeAliasesPackage: com.futao.springmvcdemo.model.entity
#  global-config:
#    db-config:
#      #      大写
#      capital-mode: false
#      db-type: mysql
#      #      查询的时候并不会带上
#      table-prefix: futao_
#      table-underline: false



# 字符串：可以不加引号    k: v  'v \n'单引号会转义，"v \n"双引号不会转义，输出换行

# 对象属性与map也可以这样写：threadpool: {corePoolSize: 10,maxPoolSize: 200,queueCapacity: 10}

# 数组(List,Set)
#pets:
#  - cat
#  - dog
#  - pig
#行内写法: pets: [cat,dog,pig]

# map
#kv:
#  k1: vq
#  k2: v2
#行内写法 kv: {k1: v1,k2: v2}

# @Value与@ConfigurationProperties
# @ConfigurationProperties支持松散语法，支持批量注入，支持JSR303校验@Validated，支持复杂类型map,list，默认从全局配置文件中获取值

# @PropertySource(加载指定的配置文件)
# @ImportResource(导入Spring的配置文件，使配置文件生效)

# 随机数 ${random.uuid}
# ${person.hello:你好} 如果person.hello没有值则用默认值"你好"代替


# 配置文件加载原则：越细越优先(待profile优先于不带profile的)
# 配置文件优先级（降序，上面的配置会覆盖下面的配置，但是所有的配置会形成互补配置):
# -file: ./config/
# -file: ./
# classpath: /config/
# classpath: /
# 也可以通过命令行的形式修改：spring.config.location=xxx
